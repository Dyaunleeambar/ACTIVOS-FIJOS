/**
 * Script de diagn√≥stico para el problema de carga inicial de equipos
 * Diagnostica por qu√© necesitas hacer clic en "actualizar" despu√©s de reiniciar el servidor
 */

console.log('üîç Script de diagn√≥stico de carga inicial cargado');

// Funci√≥n para verificar el estado de inicializaci√≥n
function diagnoseInitialLoad() {
    console.log('üîç Diagn√≥stico de carga inicial...');
    
    // Verificar si estamos en la p√°gina de equipos
    const isEquipmentPage = window.location.hash === '#equipment';
    console.log('üìç P√°gina actual:', window.location.hash, '¬øEs p√°gina de equipos?', isEquipmentPage);
    
    // Verificar si Equipment est√° disponible
    const equipmentAvailable = window.Equipment && typeof window.Equipment === 'object';
    console.log('üîß Equipment disponible:', equipmentAvailable);
    
    if (equipmentAvailable) {
        console.log('üìä Estado de Equipment:');
        console.log('   - Filtros:', window.Equipment.filters);
        console.log('   - P√°gina actual:', window.Equipment.currentPage);
        console.log('   - Equipos cargados:', window.Equipment.equipment?.length || 0);
    }
    
    // Verificar si App est√° disponible
    const appAvailable = window.App && typeof window.App === 'object';
    console.log('üì± App disponible:', appAvailable);
    
    if (appAvailable) {
        console.log('üìä Estado de App:');
        console.log('   - P√°gina actual:', window.App.currentPage);
        console.log('   - Cargando:', window.App.isLoading);
    }
    
    // Verificar elementos del DOM
    const tableContainer = document.getElementById('equipment-table-container');
    const tableBody = document.querySelector('#equipment-table tbody');
    const loadingElement = document.getElementById('equipment-loading');
    
    console.log('üìã Elementos del DOM:');
    console.log('   - Contenedor de tabla:', !!tableContainer);
    console.log('   - Cuerpo de tabla:', !!tableBody);
    console.log('   - Elemento de carga:', !!loadingElement);
    
    if (tableBody) {
        const rows = tableBody.querySelectorAll('tr');
        console.log('   - Filas en tabla:', rows.length);
    }
    
    // Verificar si hay datos en la tabla
    const hasTableData = tableBody && tableBody.children.length > 0;
    console.log('üìä ¬øHay datos en la tabla?', hasTableData);
    
    return {
        isEquipmentPage,
        equipmentAvailable,
        appAvailable,
        hasTableData,
        tableContainer: !!tableContainer,
        tableBody: !!tableBody
    };
}

// Funci√≥n para verificar el flujo de inicializaci√≥n
function diagnoseInitializationFlow() {
    console.log('üîÑ Diagn√≥stico del flujo de inicializaci√≥n...');
    
    // Verificar el orden de carga de scripts
    const scripts = Array.from(document.scripts);
    const equipmentScript = scripts.find(s => s.src && s.src.includes('equipment.js'));
    const appScript = scripts.find(s => s.src && s.src.includes('app.js'));
    const authScript = scripts.find(s => s.src && s.src.includes('auth.js'));
    
    console.log('üìú Scripts cargados:');
    console.log('   - equipment.js:', !!equipmentScript);
    console.log('   - app.js:', !!appScript);
    console.log('   - auth.js:', !!authScript);
    
    // Verificar timing de inicializaci√≥n
    console.log('‚è∞ Timing de inicializaci√≥n:');
    console.log('   - DOMContentLoaded ejecutado:', true);
    console.log('   - Equipment.init() llamado:', window.Equipment?.init?.toString().includes('console.log'));
    
    // Verificar si loadEquipmentList fue llamado
    const equipmentListCalled = window.Equipment?.loadEquipmentList?.toString().includes('console.log');
    console.log('   - loadEquipmentList() llamado:', equipmentListCalled);
}

// Funci√≥n para simular la carga inicial
function simulateInitialLoad() {
    console.log('üß™ Simulando carga inicial...');
    
    if (!window.Equipment) {
        console.error('‚ùå Equipment no est√° disponible');
        return;
    }
    
    // Limpiar estado
    console.log('üßπ Limpiando estado...');
    if (window.Equipment.cleanState) {
        window.Equipment.cleanState();
    }
    
    // Cargar equipos
    console.log('üìä Cargando equipos...');
    window.Equipment.loadEquipmentList()
        .then(() => {
            console.log('‚úÖ Carga simulada completada');
            diagnoseInitialLoad();
        })
        .catch(error => {
            console.error('‚ùå Error en carga simulada:', error);
        });
}

// Funci√≥n para verificar el problema espec√≠fico
function checkSpecificIssue() {
    console.log('üéØ Verificando problema espec√≠fico...');
    
    const diagnosis = diagnoseInitialLoad();
    
    if (diagnosis.isEquipmentPage && diagnosis.equipmentAvailable && !diagnosis.hasTableData) {
        console.log('üö® PROBLEMA DETECTADO: Est√°s en la p√°gina de equipos, Equipment est√° disponible, pero no hay datos en la tabla');
        console.log('üí° Esto explica por qu√© necesitas hacer clic en "actualizar"');
        
        // Verificar si loadEquipmentList fue llamado
        const tableBody = document.querySelector('#equipment-table tbody');
        if (tableBody && tableBody.children.length === 0) {
            console.log('üîç La tabla est√° vac√≠a - loadEquipmentList probablemente no se ejecut√≥ correctamente');
            
            // Intentar cargar manualmente
            console.log('üîÑ Intentando carga manual...');
            if (window.Equipment.loadEquipmentList) {
                window.Equipment.loadEquipmentList()
                    .then(() => {
                        console.log('‚úÖ Carga manual exitosa');
                        diagnoseInitialLoad();
                    })
                    .catch(error => {
                        console.error('‚ùå Error en carga manual:', error);
                    });
            }
        }
    } else if (!diagnosis.equipmentAvailable) {
        console.log('üö® PROBLEMA DETECTADO: Equipment no est√° disponible');
    } else if (!diagnosis.isEquipmentPage) {
        console.log('‚ÑπÔ∏è No est√°s en la p√°gina de equipos');
    } else {
        console.log('‚úÖ Todo parece estar funcionando correctamente');
    }
}

// Funci√≥n para verificar el timing de navegaci√≥n
function checkNavigationTiming() {
    console.log('‚è±Ô∏è Verificando timing de navegaci√≥n...');
    
    // Verificar si el hashchange se dispar√≥
    let hashChangeFired = false;
    const originalHashChange = window.onhashchange;
    
    window.addEventListener('hashchange', () => {
        hashChangeFired = true;
        console.log('üîÑ Hash change detectado');
    });
    
    // Simular navegaci√≥n a equipos
    console.log('üß™ Simulando navegaci√≥n a equipos...');
    window.location.hash = '#equipment';
    
    setTimeout(() => {
        console.log('‚è∞ Hash change disparado:', hashChangeFired);
        
        // Verificar si App.handleHashChange fue llamado
        if (window.App && window.App.handleHashChange) {
            console.log('‚úÖ App.handleHashChange est√° disponible');
        } else {
            console.log('‚ùå App.handleHashChange no est√° disponible');
        }
        
        // Verificar si loadPageData fue llamado
        if (window.App && window.App.loadPageData) {
            console.log('‚úÖ App.loadPageData est√° disponible');
        } else {
            console.log('‚ùå App.loadPageData no est√° disponible');
        }
    }, 100);
}

// Funci√≥n para forzar la carga inicial
function forceInitialLoad() {
    console.log('üîß Forzando carga inicial...');
    
    // Verificar que estamos en la p√°gina correcta
    if (window.location.hash !== '#equipment') {
        console.log('üìç Navegando a p√°gina de equipos...');
        window.location.hash = '#equipment';
        
        // Esperar a que se complete la navegaci√≥n
        setTimeout(() => {
            forceInitialLoad();
        }, 200);
        return;
    }
    
    // Verificar que Equipment est√© disponible
    if (!window.Equipment) {
        console.error('‚ùå Equipment no est√° disponible');
        return;
    }
    
    // Limpiar estado y cargar
    console.log('üßπ Limpiando estado...');
    if (window.Equipment.cleanState) {
        window.Equipment.cleanState();
    }
    
    console.log('üìä Cargando equipos...');
    window.Equipment.loadEquipmentList()
        .then(() => {
            console.log('‚úÖ Carga forzada completada');
            diagnoseInitialLoad();
        })
        .catch(error => {
            console.error('‚ùå Error en carga forzada:', error);
        });
}

// Funci√≥n para verificar el problema despu√©s del login
function checkPostLoginIssue() {
    console.log('üîê Verificando problema despu√©s del login...');
    
    // Verificar si el usuario est√° autenticado
    const isAuthenticated = window.Auth && window.Auth.isAuthenticated;
    console.log('üîê Usuario autenticado:', isAuthenticated);
    
    if (isAuthenticated) {
        console.log('‚úÖ Usuario autenticado, verificando estado de la aplicaci√≥n...');
        diagnoseInitialLoad();
    } else {
        console.log('‚ùå Usuario no autenticado');
    }
}

// Funci√≥n para ejecutar diagn√≥stico completo
function runCompleteDiagnosis() {
    console.log('üîç Ejecutando diagn√≥stico completo...');
    
    console.log('\n=== DIAGN√ìSTICO DE CARGA INICIAL ===');
    diagnoseInitialLoad();
    
    console.log('\n=== DIAGN√ìSTICO DEL FLUJO DE INICIALIZACI√ìN ===');
    diagnoseInitializationFlow();
    
    console.log('\n=== VERIFICACI√ìN DEL PROBLEMA ESPEC√çFICO ===');
    checkSpecificIssue();
    
    console.log('\n=== VERIFICACI√ìN POST-LOGIN ===');
    checkPostLoginIssue();
    
    console.log('\n=== DIAGN√ìSTICO COMPLETADO ===');
    console.log('üí° Si el problema persiste, usa forceInitialLoad() para forzar la carga');
}

// Exportar funciones
window.diagnoseInitialLoad = diagnoseInitialLoad;
window.diagnoseInitializationFlow = diagnoseInitializationFlow;
window.simulateInitialLoad = simulateInitialLoad;
window.checkSpecificIssue = checkSpecificIssue;
window.checkNavigationTiming = checkNavigationTiming;
window.forceInitialLoad = forceInitialLoad;
window.checkPostLoginIssue = checkPostLoginIssue;
window.runCompleteDiagnosis = runCompleteDiagnosis;

// Inicializar diagn√≥stico autom√°tico
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîç Script de diagn√≥stico de carga inicial inicializado');
    console.log('üìù Comandos disponibles:');
    console.log('   - diagnoseInitialLoad() - Verificar estado actual');
    console.log('   - diagnoseInitializationFlow() - Verificar flujo de inicializaci√≥n');
    console.log('   - simulateInitialLoad() - Simular carga inicial');
    console.log('   - checkSpecificIssue() - Verificar problema espec√≠fico');
    console.log('   - checkNavigationTiming() - Verificar timing de navegaci√≥n');
    console.log('   - forceInitialLoad() - Forzar carga inicial');
    console.log('   - checkPostLoginIssue() - Verificar despu√©s del login');
    console.log('   - runCompleteDiagnosis() - Ejecutar diagn√≥stico completo');
    
    // Ejecutar diagn√≥stico autom√°tico despu√©s de un delay
    setTimeout(() => {
        console.log('üîç Ejecutando diagn√≥stico autom√°tico...');
        runCompleteDiagnosis();
    }, 2000);
});

console.log('‚úÖ Script de diagn√≥stico de carga inicial cargado. Usa los comandos para diagnosticar el problema.'); 
