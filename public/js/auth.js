// M√≥dulo de Autenticaci√≥n
const Auth = {
    // Estado de autenticaci√≥n
    isAuthenticated: false,
    currentUser: null,
    
    // Inicializar autenticaci√≥n
    init: async function() {
        await this.checkAuthStatus();
        this.setupEventListeners();
    },
    
    // Verificar estado de autenticaci√≥n
    checkAuthStatus: async function() {
        console.log('üîç Iniciando verificaci√≥n de autenticaci√≥n...');
        
        const token = ConfigUtils.getAuthToken();
        const userData = ConfigUtils.getUserData();
        
        console.log('üìã Token encontrado:', !!token);
        console.log('üë§ Datos de usuario encontrados:', !!userData);
        
        // Si no hay token o datos de usuario, mostrar login
        if (!token || !userData) {
            console.log('‚ùå No hay token o datos de usuario, mostrando login');
            this.isAuthenticated = false;
            this.currentUser = null;
            this.showLogin();
            return;
        }
        
        // Mostrar pantalla de carga mientras valida
        console.log('‚è≥ Mostrando pantalla de carga...');
        this.showLoading();
        
        // Validar token con el servidor
        try {
            console.log('üîê Validando token con el servidor...');
            const isValid = await this.verifyToken();
            
            console.log('‚úÖ Resultado de validaci√≥n:', isValid);
            
            if (isValid) {
                // Token v√°lido - mostrar aplicaci√≥n
                console.log('‚úÖ Token v√°lido, mostrando aplicaci√≥n');
                this.isAuthenticated = true;
                this.currentUser = userData;
                this.showApp();
            } else {
                // Token inv√°lido - limpiar datos y mostrar login
                console.log('üîÑ Token inv√°lido, limpiando sesi√≥n...');
                ConfigUtils.removeAuthToken();
                ConfigUtils.removeUserData();
                this.isAuthenticated = false;
                this.currentUser = null;
                this.showLogin();
            }
        } catch (error) {
            console.error('‚ùå Error validando token:', error);
            // En caso de error de conexi√≥n, limpiar sesi√≥n por seguridad
            console.log('üîÑ Error de conexi√≥n, limpiando sesi√≥n por seguridad...');
            ConfigUtils.removeAuthToken();
            ConfigUtils.removeUserData();
            this.isAuthenticated = false;
            this.currentUser = null;
            this.showLogin();
        }
    },
    
    // Verificar estado de autenticaci√≥n (versi√≥n sin validaci√≥n de servidor)
    checkAuthStatusSimple: function() {
        console.log('üîç Iniciando verificaci√≥n simple de autenticaci√≥n...');
        
        const token = ConfigUtils.getAuthToken();
        const userData = ConfigUtils.getUserData();
        
        console.log('üìã Token encontrado:', !!token);
        console.log('üë§ Datos de usuario encontrados:', !!userData);
        
        // Si no hay token o datos de usuario, mostrar login
        if (!token || !userData) {
            console.log('‚ùå No hay token o datos de usuario, mostrando login');
            this.isAuthenticated = false;
            this.currentUser = null;
            this.showLogin();
            return;
        }
        
        // Si hay token y datos, mostrar aplicaci√≥n (sin validar con servidor)
        console.log('‚úÖ Token y datos encontrados, mostrando aplicaci√≥n');
        this.isAuthenticated = true;
        this.currentUser = userData;
        this.showApp();
    },
    
    // Configurar event listeners
    setupEventListeners: function() {
        // Login form
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleLogin();
            });
        }
        
        // Logout button
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.handleLogout();
            });
        }
        
        // User menu
        const userMenuBtn = document.getElementById('user-menu-btn');
        const userDropdown = document.getElementById('user-dropdown');
        
        if (userMenuBtn && userDropdown) {
            userMenuBtn.addEventListener('click', () => {
                userDropdown.classList.toggle('active');
            });
            
            // Cerrar dropdown al hacer clic fuera
            document.addEventListener('click', (e) => {
                if (!userMenuBtn.contains(e.target) && !userDropdown.contains(e.target)) {
                    userDropdown.classList.remove('active');
                }
            });
        }
        
        // Change password link
        const changePasswordLink = document.getElementById('change-password-link');
        if (changePasswordLink) {
            changePasswordLink.addEventListener('click', (e) => {
                e.preventDefault();
                this.showChangePasswordModal();
            });
        }
    },
    
    // Manejar login
    handleLogin: async function() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const errorElement = document.getElementById('login-error');
        
        // Validaciones b√°sicas
        if (!username || !password) {
            this.showLoginError('Por favor complete todos los campos');
            return;
        }
        
        try {
            // Mostrar loading
            this.showLoginLoading(true);
            
            const response = await fetch(ConfigUtils.getApiUrl('/auth/login'), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Login exitoso
                ConfigUtils.setAuthToken(data.token);
                ConfigUtils.setUserData(data.user);
                
                this.isAuthenticated = true;
                this.currentUser = data.user;
                
                // Mostrar notificaci√≥n de √©xito
                UI.showNotification('Login exitoso', 'success');
                
                // Mostrar aplicaci√≥n
                this.showApp();
                
                // Limpiar formulario
                document.getElementById('login-form').reset();
                
            } else {
                // Error en login
                this.showLoginError(data.error || 'Error en las credenciales');
            }
            
        } catch (error) {
            console.error('Error en login:', error);
            this.showLoginError('Error de conexi√≥n. Intente nuevamente.');
        } finally {
            this.showLoginLoading(false);
        }
    },
    
    // Manejar logout
    handleLogout: async function() {
        try {
            // Llamar al endpoint de logout
            await fetch(ConfigUtils.getApiUrl('/auth/logout'), {
                method: 'POST',
                headers: ConfigUtils.getAuthHeaders()
            });
        } catch (error) {
            console.error('Error en logout:', error);
        }
        
        // Limpiar datos locales
        ConfigUtils.removeAuthToken();
        ConfigUtils.removeUserData();
        
        this.isAuthenticated = false;
        this.currentUser = null;
        
        // Limpiar estado de navegaci√≥n
        this.clearNavigationState();
        
        // Mostrar login
        this.showLogin();
        
        // Mostrar notificaci√≥n
        UI.showNotification('Sesi√≥n cerrada exitosamente', 'info');
    },
    
    // Mostrar p√°gina de login
    showLogin: function() {
        document.getElementById('login-page').style.display = 'flex';
        document.getElementById('app').style.display = 'none';
        document.getElementById('loading-screen').style.display = 'none';
    },
    
    // Mostrar pantalla de carga
    showLoading: function() {
        document.getElementById('login-page').style.display = 'none';
        document.getElementById('app').style.display = 'none';
        document.getElementById('loading-screen').style.display = 'flex';
    },
    
    // Mostrar aplicaci√≥n
    showApp: function() {
        document.getElementById('login-page').style.display = 'none';
        document.getElementById('app').style.display = 'flex';
        document.getElementById('loading-screen').style.display = 'none';
        
        // Actualizar informaci√≥n del usuario
        this.updateUserInfo();
        
        // Solo redirigir al Dashboard si no hay hash espec√≠fico o si estamos en login
        const currentHash = window.location.hash;
        if (!currentHash || currentHash === '#login' || currentHash === '') {
            this.redirectToDashboard();
        } else {
            // Si ya hay un hash espec√≠fico, solo inicializar la aplicaci√≥n
            console.log('üìç Manteniendo p√°gina actual:', currentHash);
            if (window.App) {
                App.init();
            }
        }
    },
    
    // Redirigir al Dashboard
    redirectToDashboard: function() {
        console.log('üè† Redirigiendo al Dashboard...');
        
        // Limpiar hash anterior y establecer dashboard
        window.location.hash = '#dashboard';
        
        // Si la aplicaci√≥n ya est√° inicializada, navegar directamente
        if (window.App && window.App.navigateToPage) {
            window.App.navigateToPage('dashboard');
        } else {
            // Si la aplicaci√≥n no est√° inicializada, esperar un poco y intentar de nuevo
            setTimeout(() => {
                if (window.App && window.App.navigateToPage) {
                    window.App.navigateToPage('dashboard');
                } else {
                    // Fallback: usar UI.showPage directamente
                    if (window.UI && window.UI.showPage) {
                        window.UI.showPage('dashboard');
                    }
                }
            }, 100);
        }
        
        console.log('‚úÖ Redirecci√≥n al Dashboard completada');
    },
    
    // Limpiar estado de navegaci√≥n
    clearNavigationState: function() {
        console.log('üßπ Limpiando estado de navegaci√≥n...');
        
        // Limpiar hash de la URL
        window.location.hash = '';
        
        // Limpiar cualquier estado de navegaci√≥n en la aplicaci√≥n
        if (window.App) {
            window.App.currentPage = 'dashboard';
        }
        
        console.log('‚úÖ Estado de navegaci√≥n limpiado');
    },
    
    // Actualizar informaci√≥n del usuario en la UI
    updateUserInfo: function() {
        if (!this.currentUser) return;
        
        // Actualizar nombre de usuario en el header
        const userNameElement = document.getElementById('user-name');
        const userFullNameElement = document.getElementById('user-full-name');
        const userRoleElement = document.getElementById('user-role');
        
        if (userNameElement) {
            userNameElement.textContent = this.currentUser.username;
        }
        
        if (userFullNameElement) {
            userFullNameElement.textContent = this.currentUser.full_name;
        }
        
        if (userRoleElement) {
            userRoleElement.textContent = ConfigUtils.getUserRoleText(this.currentUser.role);
        }
    },
    
    // Mostrar error de login
    showLoginError: function(message) {
        const errorElement = document.getElementById('login-error');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            
            // Ocultar error despu√©s de 5 segundos
            setTimeout(() => {
                errorElement.style.display = 'none';
            }, 5000);
        }
    },
    
    // Mostrar/ocultar loading en login
    showLoginLoading: function(show) {
        const submitBtn = document.querySelector('#login-form button[type="submit"]');
        if (submitBtn) {
            if (show) {
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Iniciando...';
                submitBtn.disabled = true;
            } else {
                submitBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i> Iniciar Sesi√≥n';
                submitBtn.disabled = false;
            }
        }
    },
    
    // Verificar token
    verifyToken: async function() {
        try {
            console.log('üîê Iniciando verificaci√≥n de token...');
            console.log('üåê URL de verificaci√≥n:', ConfigUtils.getApiUrl('/auth/verify'));
            
            // Agregar timeout de 5 segundos
            const controller = new AbortController();
            const timeoutId = setTimeout(() => {
                console.log('‚è∞ Timeout alcanzado, abortando...');
                controller.abort();
            }, 5000);
            
            const response = await fetch(ConfigUtils.getApiUrl('/auth/verify'), {
                method: 'GET',
                headers: ConfigUtils.getAuthHeaders(),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            console.log('üì° Respuesta del servidor:', response.status, response.statusText);
            
            if (response.ok) {
                const data = await response.json();
                console.log('üìÑ Datos de respuesta:', data);
                if (data.valid) {
                    console.log('‚úÖ Token v√°lido confirmado por servidor');
                    return true;
                } else {
                    console.log('‚ùå Token inv√°lido seg√∫n servidor');
                    return false;
                }
            } else {
                console.log('‚ùå Error en respuesta del servidor:', response.status);
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå Error verificando token:', error);
            return false;
        }
    },
    
    // Renovar token autom√°ticamente
    refreshToken: async function() {
        // Implementar renovaci√≥n autom√°tica de token si es necesario
        console.log('Renovando token...');
    },
    
    // Mostrar modal de cambio de contrase√±a
    showChangePasswordModal: function() {
        const modalContent = `
            <div class="form-container">
                <h3>Cambiar Contrase√±a</h3>
                <form id="change-password-form">
                    <div class="form-group">
                        <label for="current-password">
                            <i class="fas fa-lock"></i>
                            Contrase√±a Actual
                        </label>
                        <input type="password" id="current-password" name="currentPassword" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="new-password">
                            <i class="fas fa-key"></i>
                            Nueva Contrase√±a
                        </label>
                        <input type="password" id="new-password" name="newPassword" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirm-password">
                            <i class="fas fa-check"></i>
                            Confirmar Nueva Contrase√±a
                        </label>
                        <input type="password" id="confirm-password" name="confirmPassword" required>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="UI.closeModal()">
                            Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i>
                            Cambiar Contrase√±a
                        </button>
                    </div>
                </form>
            </div>
        `;
        
        UI.showModal('Cambiar Contrase√±a', modalContent);
        
        // Configurar event listener para el formulario
        const form = document.getElementById('change-password-form');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleChangePassword();
            });
        }
    },
    
    // Manejar cambio de contrase√±a
    handleChangePassword: async function() {
        const currentPassword = document.getElementById('current-password').value;
        const newPassword = document.getElementById('new-password').value;
        const confirmPassword = document.getElementById('confirm-password').value;
        
        // Validaciones
        if (!currentPassword || !newPassword || !confirmPassword) {
            UI.showNotification('Por favor complete todos los campos', 'error');
            return;
        }
        
        if (newPassword !== confirmPassword) {
            UI.showNotification('Las contrase√±as no coinciden', 'error');
            return;
        }
        
        if (newPassword.length < 6) {
            UI.showNotification('La nueva contrase√±a debe tener al menos 6 caracteres', 'error');
            return;
        }
        
        try {
            const response = await fetch(ConfigUtils.getApiUrl('/auth/change-password'), {
                method: 'POST',
                headers: ConfigUtils.getAuthHeaders(),
                body: JSON.stringify({
                    currentPassword,
                    newPassword
                })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                UI.showNotification('Contrase√±a cambiada exitosamente', 'success');
                UI.closeModal();
                
                // Limpiar formulario
                document.getElementById('change-password-form').reset();
                
            } else {
                UI.showNotification(data.error || 'Error al cambiar contrase√±a', 'error');
            }
            
        } catch (error) {
            console.error('Error cambiando contrase√±a:', error);
            UI.showNotification('Error de conexi√≥n', 'error');
        }
    },
    
    // Verificar permisos
    hasPermission: function(permission) {
        if (!this.currentUser) return false;
        
        // Implementar l√≥gica de permisos seg√∫n el rol
        const role = this.currentUser.role;
        
        switch (permission) {
            case 'admin':
                return role === 'admin';
            case 'manager':
                return role === 'admin' || role === 'manager';
            case 'consultant':
                return role === 'admin' || role === 'manager' || role === 'consultant';
            default:
                return false;
        }
    },
    
    // Obtener rol actual
    getCurrentRole: function() {
        return this.currentUser ? this.currentUser.role : null;
    },
    
    // Obtener ID del estado del usuario (para managers)
    getUserStateId: function() {
        return this.currentUser ? this.currentUser.state_id : null;
    },
    
    // Funci√≥n para limpiar sesi√≥n manualmente (√∫til para testing)
    clearSession: function() {
        console.log('üßπ Limpiando sesi√≥n manualmente...');
        ConfigUtils.removeAuthToken();
        ConfigUtils.removeUserData();
        this.isAuthenticated = false;
        this.currentUser = null;
        this.showLogin();
        console.log('‚úÖ Sesi√≥n limpiada, mostrando login');
    },
    
    // Funci√≥n para limpiar sessionStorage completamente
    clearSessionStorage: function() {
        console.log('üßπ Limpiando sessionStorage completamente...');
        sessionStorage.clear();
        console.log('‚úÖ sessionStorage limpiado');
        this.clearSession();
    },
    
    // Funci√≥n para cambiar modo de validaci√≥n
    setValidationMode: function(useServer = true) {
        if (useServer) {
            console.log('üîß Cambiando a modo validaci√≥n con servidor');
            this.checkAuthStatus = this.checkAuthStatusWithServer;
        } else {
            console.log('üîß Cambiando a modo validaci√≥n sin servidor');
            this.checkAuthStatus = this.checkAuthStatusSimple;
        }
    },
    
    // Guardar referencia a la funci√≥n original
    checkAuthStatusWithServer: async function() {
        const token = ConfigUtils.getAuthToken();
        const userData = ConfigUtils.getUserData();
        
        // Si no hay token o datos de usuario, mostrar login
        if (!token || !userData) {
            this.isAuthenticated = false;
            this.currentUser = null;
            this.showLogin();
            return;
        }
        
        // Mostrar pantalla de carga mientras valida
        this.showLoading();
        
        // Validar token con el servidor
        try {
            const isValid = await this.verifyToken();
            
            if (isValid) {
                // Token v√°lido - mostrar aplicaci√≥n
                this.isAuthenticated = true;
                this.currentUser = userData;
                this.showApp();
            } else {
                // Token inv√°lido - limpiar datos y mostrar login
                ConfigUtils.removeAuthToken();
                ConfigUtils.removeUserData();
                this.isAuthenticated = false;
                this.currentUser = null;
                this.showLogin();
            }
        } catch (error) {
            console.error('‚ùå Error validando token:', error);
            // En caso de error de conexi√≥n, limpiar sesi√≥n por seguridad
            ConfigUtils.removeAuthToken();
            ConfigUtils.removeUserData();
            this.isAuthenticated = false;
            this.currentUser = null;
            this.showLogin();
        }
    }
};

// Inicializar autenticaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', async () => {
    await Auth.init();
});

// Exportar m√≥dulo de autenticaci√≥n
window.Auth = Auth;

// Funciones de debug globales (para testing desde consola)
window.debugAuth = {
    // Limpiar sesi√≥n
    clearSession: () => {
        Auth.clearSession();
    },
    
    // Limpiar sessionStorage completamente
    clearSessionStorage: () => {
        Auth.clearSessionStorage();
    },
    
    // Limpiar estado de navegaci√≥n
    clearNavigation: () => {
        Auth.clearNavigationState();
    },
    
    // Redirigir al Dashboard
    goToDashboard: () => {
        Auth.redirectToDashboard();
    },
    
    // Verificar estado actual
    checkStatus: () => {
        console.log('üîç Estado actual de autenticaci√≥n:');
        console.log('Token:', !!ConfigUtils.getAuthToken());
        console.log('User Data:', !!ConfigUtils.getUserData());
        console.log('Is Authenticated:', Auth.isAuthenticated);
        console.log('Current User:', Auth.currentUser);
    },
    
    // Forzar validaci√≥n de token
    forceVerify: async () => {
        console.log('üîê Forzando verificaci√≥n de token...');
        const result = await Auth.verifyToken();
        console.log('Resultado:', result);
        return result;
    },
    
    // Cambiar modo de validaci√≥n
    setValidationMode: (useServer) => {
        Auth.setValidationMode(useServer);
    },
    
    // Mostrar login
    showLogin: () => {
        Auth.showLogin();
    },
    
    // Mostrar app
    showApp: () => {
        Auth.showApp();
    },
    
    // Reinicializar autenticaci√≥n
    reinit: async () => {
        console.log('üîÑ Reinicializando autenticaci√≥n...');
        await Auth.init();
    }
}; 
